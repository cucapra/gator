type a  is float[2];
type a2 is a;
type b  is float[3];
with float[2] T:    type p is float[2];
with float[2] T:    type pl is T;
with b T:           type bl is T;
// TODO: add support for static length analysis
// with float[n] T:    type pany is float[2];
// with float[3] T:    type p3 is pany<T>;
with a T:           type r is float[3];

void main() {
    p<a> s1 = [1., 1.];
    pl<a> s2 = [1., 1.];
    a s3 = s2; // Upcasting cause pl<T> is T
    bl<bl<bl<b>>> s4 = [1., 1., 1.];
    bl<b> s5 = s4;
    pl<pl<p<pl<a2>>>> s6 = [1., 1.];
    p<pl<a2>> s7 = s6;
    // pany<pany<b>> s8 = [0., 0.];
    // p3<r<a2>> s9 = [1., 1.];
    // pany<r<a2>> s10 = s9;

    print 1;
}