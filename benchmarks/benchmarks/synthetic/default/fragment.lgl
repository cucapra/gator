// Blinn-Phong
// GLSL reference:
// https://learnopengl.com/Lighting/Basic-Lighting
// Note that some varying values are baked in differently here (e.g. vNormal vs. normalWorld)
// Thus we sometimes use Braid example as a reference
// https://capra.cs.cornell.edu/braid/dingus/#example=phong

tag coord model is vec3;
tag coord world is vec3;
tag coord camera is vec3;
tag coord hom<`t : vec3> is vec4;
tag norm<`t : vec> is `t;
tag color is vec3;
tag alpha<`t : color> is vec4;

declare canon norm<`t> normalize<`t : vec>(`t x);
declare float dot<`t: vec>(norm<`t> v1, norm<`t> v2);
declare vec4 vec4(vec3 v, float f);
declare vec3 vec3(vec4 v);
declare float min(float f1, float f2);
declare float max(float f1, float f2);
declare `t reflect<`t : vec>(`t v1, `t v2);
declare float pow(float f1, float f2);


uniform world uLight;
uniform model vPosition;
uniform hom<model>->hom<world> uModel;
uniform hom<world>->hom<camera> uView;
varying norm<model> vNormal;

canon hom<`t> homify<`t : vec3>(`t v) { return vec4(v as vec3, 1.) as hom<`t>; }
canon `t hom_reduce<`t : vec3>(hom<`t> v) { return vec3(v as vec4) as `t; }
canon hom<`t> homify_normal<`t : vec3>(norm<`t> v) { return vec4(v as vec3, 0.) as hom<`t>; }
canon alpha<color> extendColor(color v) { return vec4(v as vec3, 1.) as alpha<color>; }


void main(){
    color ambient = [.1, 0., 0.];
    color diffuse = [0.004, 0.003, 0.009];
    color spec = [0.01, 0.01, 0.01];
    float lambertian = 0.;
    float specular = 0.;
    for (int x=-5; x<=5; x++) {
        for (int y=-5; y<=5; y++) {
            auto lightDir = (uLight + [x,y,0] - (vPosition in world)) in norm<world>;
            lambertian += max(dot(vNormal in norm<world>, lightDir), 0.);
            auto reflectDir = normalize(reflect(-lightDir, vNormal in norm<world>) in camera);
            specular += pow(max(dot(-(vPosition in norm<camera>), reflectDir), 0.0), 32.);

        }
    }
    alpha<color> gl_FragColor = extendColor(ambient + lambertian * diffuse + specular * spec);
}
