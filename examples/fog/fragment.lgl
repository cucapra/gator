#"precision mediump float;";
using "../glsl_defs.lgl";

type color is vec3;
type alphaColor is vec4;


// Reference Frame Declarations

frame model has dimension 3;
frame world has dimension 3;
frame camera has dimension 3;
frame light has dimension 3;

// Global Variables

varying cart3<model>.point vPosition;
canon uniform hom<model>.transformation<world> uModel;
canon uniform hom<world>.transformation<camera> uView;
varying cart3<model>.vector vNormal;
uniform cart3<light>.point uLight;
uniform cart3<light>.point uViewPoint;
uniform color diffColor;
canon uniform hom<light>.transformation<world> uLightTrans;

void main() {
    color ambient = [.1, 0.1, 0.1];
    color specColor = [1.0, 1.0, 1.0];

    auto worldPos = vPosition in world;
    auto camPos = worldPos in camera;
    auto worldNorm = normalize(vNormal in world);

    auto lightDir = normalize((uLight in world) - worldPos);
    auto lightWorldDot = dot(lightDir, worldNorm);
    scalar diffuse = max(lightWorldDot, 0.0);

    auto reflectDir = normalize(reflect(-lightDir, worldNorm) in camera);

    scalar specular = pow(max(dot(normalize(-camPos), reflectDir), 0.), 32.);

    //worldPos
    auto lightVec = uLight in world - worldPos;//vector
    auto viewPos = uViewPoint in world;
    auto BA = lightVec - worldPos;
    auto BC = viewPos - worldPos;
    float bcMagnitude = length(BC);
    float H = length(cross(BA as! vec3, BC as! vec3));
    float fogVal = atan(bcMagnitude, H)/H;
    float fogStr = 100.0;
    float r = fogVal*fogStr;

    vec3 rvec = vec3(r,r,r);
    gl_FragColor = vec4(ambient + (diffuse * diffColor + specular * specColor)*r, 1.0);
}