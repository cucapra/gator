#"precision mediump float;";

using "../glsl_defs.lgl";

type color is vec3;
type alphaColor is vec4;

// Reference Frame Declarations

frame model has dimension 3;
frame world has dimension 3;
frame camera has dimension 3;

// Global Variables
varying cart3<model>.point vPosition;
uniform hom<model>.transformation<world> uModel;
uniform hom<world>.transformation<camera> uView;
varying cart3<model>.vector vNormal;

struct light {
  cart3<world>.point pos;
  color diffColor;
  color specColor;
};
uniform light uLight;

struct positions {
  cart3<world>.point worldPos;
};

void main() {
    // vec4 gl_FragColor = vec4(uLight, .9);
    hom<model>.transformation<camera> uModelView = uView * uModel;
    color ambient = [0.1, 0., 0.];
    positions p = positions(hom_reduce(uModel*homify(vPosition)));
    auto camPos = hom_reduce(uView*uModel*homify(vPosition));
    auto worldNorm = normalize(hom_reduce(uModel*homify(vNormal)));

    auto lightDir = normalize(uLight.pos - p.worldPos);
    auto lightWorldDot = dot(lightDir, worldNorm);
    scalar diffuse = max(lightWorldDot, 0.);

    auto reflectDir = normalize(hom_reduce(uView * homify(reflect(-lightDir, worldNorm))));

    scalar specular = pow(max(dot(normalize(-camPos), reflectDir), 0.), 32.);

    gl_FragColor = vec4(ambient + diffuse * uLight.diffColor + specular * uLight.specColor, 1.0);
}