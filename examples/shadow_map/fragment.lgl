#"precision mediump float;";

using "../glsl_defs.lgl";

type color is vec3;
type alphaColor is vec4;

frame model has dimension 3;
frame world has dimension 3;
frame light has dimension 3;
frame camera has dimension 3;
frame lightProjective has dimension 3;
frame projective has dimension 3;

uniform sampler2D<alphaColor> uTexture;
varying cart3<model>.point vPosition;
varying cart3<model>.vector vNormal;
varying cart3<lightProjective>.point vShadowPos;
canon uniform hom<model>.transformation<world> uModel;
canon uniform hom<world>.transformation<camera> uCamera;
uniform cart3<world>.point uLight;
uniform color uBaseColor;
uniform float uSpecStrength;

alphaColor extendColor(color c) {
  return vec4(c, 1.) as! alphaColor;
}

float decodeFloat (alphaColor c) {
  alphaColor bitShift = [1.0 / (256. * 256. * 256.), 1.0 / (256. * 256.), 1.0 / (256.0), 1.];
  return dot(c, bitShift);
}

color phong_light(cart3<world>.point lightPos, cart3<world>.point fragPos, cart3<world>.direction normalDir, color baseColor,
float specStrength, float linear, float quad) {
    float lambertian = max(0., dot(normalDir, normalize(-(-lightPos))));
    cart3<world>.direction reflectDir = normalize(reflect(normalize(-lightPos), normalDir));
    float specular = 0.;
    if (0. <= lambertian) {
        specular = pow(max(0., dot(normalize(-fragPos), reflectDir)), 32.);
    }
    float distance = length(lightPos - fragPos);
    auto temp = (linear * distance + quad * distance * distance);
    float attenuation = 1.0 / temp;
    auto tempColor = (lambertian * baseColor + specStrength * specular * [1., 1., 1.]);
    return tempColor * attenuation;
}

void main() {
  // vec4 color = [.6, .5, .2, 1.];
  color ambient = [.1, 0., 0.];
  float texelSize = 1. / 1024.;
  vec2 temp = [vShadowPos[0], vShadowPos[1]];
  alphaColor v = texture2D(uTexture, temp);
  float amountInLight = 0.;
  for (float x = -1.; x <= 1.; x += 1.) {
    for (float y = -1.; y <= 1.; y += 1.) {
      float texelDepth = decodeFloat(texture2D(uTexture, temp + [x, y] * texelSize));
      // float texelDepth = texture2D(uTexture, vShadowPos.xy + [x, y] * texelSize).z;
      if (vShadowPos[2] - 0.007 <= texelDepth) {
        amountInLight += 1.0;
      }
    }
  }
  amountInLight /= 9.;
  color phong_color = phong_light(uLight, vPosition in world, normalize(vNormal in world), 
    uBaseColor, uSpecStrength, .08, .0001);

  auto gl_FragColor = extendColor(ambient + phong_color * amountInLight);
}
