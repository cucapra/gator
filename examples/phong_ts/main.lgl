//Imports
using "../ts_defs.lgl";
#"import * as lgl from '../lglexample';";

//Globals
const WebGLRenderingContext gl;
const WebGLProgram program;
const WebGLUniformLocation loc_uProjection;
const WebGLUniformLocation loc_uView;
const WebGLUniformLocation loc_uModel;
const WebGLUniformLocation loc_uLight;
const float loc_aPosition;
const float loc_aNormal;
const lgl.Mesh mesh;
declare WebGLBuffer mesh.normals;
declare WebGLBuffer mesh.positions;

//Gator Matrices
frame model has dimension 3;
frame world has dimension 3;
frame camera has dimension 3;
frame proj has dimension 3;

const hom<model>.transformation<world> uModel;
const cart3<world>.point uLight;


void render(hom<world>.transformation<camera> uView,  hom<camera>.transformation<proj> projection){
    // Rotate the model a little bit on each frame.
    rotateY(uModel, uModel, 0.1);

    // Use our shader pair.
    gl.useProgram(program);

    // Set the shader "uniform" parameters.
    gl.uniformMatrix4fv(loc_uProjection, false, projection);
    gl.uniformMatrix4fv(loc_uView, false, uView);
    gl.uniformMatrix4fv(loc_uModel, false, uModel);
    gl.uniform3fv(loc_uLight, uLight);

    // Set the attribute arrays.
    lgl.bind_attrib_buffer(gl, loc_aNormal, mesh.normals, 3);
    lgl.bind_attrib_buffer(gl, loc_aPosition, mesh.positions, 3);

    gl.disable(gl.CULL_FACE);

    // Draw the object.
    lgl.drawMesh(gl, mesh);
}

void main(){
    #"gl = lgl.setup(render_0);";

    // Compiler our shaders.
    program = lgl.compileProgram(gl, require("./vertex.lgl"), require("./fragment.lgl"));

    // Uniform and attribute locations.
    loc_uProjection = lgl.uniformLoc(gl, program, "uProjection");
    loc_uView = lgl.uniformLoc(gl, program, "uView");
    loc_uModel = lgl.uniformLoc(gl, program, "uModel");
    loc_uLight = lgl.uniformLoc(gl, program, "uLight");
    loc_aPosition = lgl.attribLoc(gl, program, "aPosition");
    loc_aNormal = lgl.attribLoc(gl, program, "aNormal");

    // We'll draw a gator
    mesh = lgl.getBunny(gl);

    // Initialize the model position.
    uModel = mat4.create();

    // Position the light source for the lighting effect.
    uLight = vec3.fromValues(20., 0., 20.);
}