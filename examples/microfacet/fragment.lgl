#"precision mediump float;";
#"precision mediump int;";
using "../glsl_defs.lgl";

type color is vec3;
type uv is vec2;
type alphaColor is vec4;
type attenuation is vec3;

frame view has dimension 3;
frame normal_localframe has dimension 3;

const float PI = 3.14159265359;
varying cart3<view>.position geom_position;
varying uv geom_texCoord;
canon varying cart3<view>.normal geom_normal;
varying cart3<view>.vector geom_tangent;
varying cart3<view>.vector geom_bitangent;
uniform color mat_diffuseColor;
uniform int mat_hasDiffuseTexture;
uniform sampler2D<alphaColor> mat_diffuseTexture;
uniform float mat_indexOfRefraction;
uniform float mat_alpha;
uniform int mat_hasAlphaTexture;
uniform sampler2D<vec4> mat_alphaTexture;
uniform int mat_hasNormalTexture;
uniform sampler2D<alphaColor> mat_normalTexture;
uniform float mat_normalTextureScale;
uniform int anisotropic;
uniform cart3<view>.position light_eyePosition;
uniform attenuation light_attenuation;
uniform color light_color;

canon cart3<normal_localframe>.halfdir proj_normlocalframe (cart3<view>.halfdir m, canon cart3<view>.normal n) {
    auto nhat = normalize(n);
    auto t = normalize(geom_tangent - dot(geom_tangent,nhat) * nhat);
	// Unfortunate hack due to bug
    auto b = (cross(nhat as! vec3, t as! vec3) as! cart3<view>.direction);
    if (dot(normalize(geom_bitangent), b) <= 0.) {
		///??????
        b = (-b) as! cart3<view>.direction;
    }
    return [dot(m, t), dot(m,b), dot(m,nhat)];
}

cart3<view>.normal getShadingNormal() {
    auto nhat = normalize(geom_normal);
    if (mat_hasNormalTexture == 1) {
        color rgb = vec3(texture2D(mat_normalTexture, geom_texCoord)) as! color;
        nhat = [2.*rgb[0] - 1., 2.*rgb[1] - 1., 2. * rgb[2] - 1.];

        auto n = normalize(geom_normal);
        auto t = normalize(geom_tangent - dot(geom_tangent,n) * n);
        auto b = (cross(n as! vec3, t as! vec3) as! cart3<view>.direction);
        if (dot(normalize(geom_bitangent), b) < 0.) {
            b = (-b) as! cart3<view>.direction;
        }

        float s = mat_normalTextureScale;

        return normalize(s * nhat[0] * t + s * nhat[1] * b + nhat[2] * n);
    }
    else {return nhat as! cart3<view>.normal;}
}

cart3<view>.halfdir get_halfdir(cart3<view>.direction n1, cart3<view>.direction n2){
	return normalize(n1 + n2) as! cart3<view>.halfdir;
}

alphaColor alphatize(vec3 c)  {return vec4(c, 1.) as! alphaColor;}

float F(cart3<view>.direction i, cart3<view>.halfdir m) {
	float c = abs(dot(i, m));
	float g = sqrt(mat_indexOfRefraction * mat_indexOfRefraction - 1. + c * c);

	return (1. / 2.) * ((g-c)*(g-c)) / ((g+c)*(g+c)) * 
    (1. + ((c * (g + c) - 1.)*(c * (g + c) - 1.)) / ((c * (g - c) + 1.)*(c * (g - c) + 1.)));
}

float getRoughness() {
	float a = mat_alpha;
	if (mat_hasAlphaTexture == 1){
		auto temp = texture2D(mat_alphaTexture, geom_texCoord);
		a *= temp[0];
	}
	return a;
}

with float[3] T:
float getAngle(T v1, T v2) { 
	return acos(dot(v1 as! vec3, v2 as! vec3));
}

float D(cart3<view>.halfdir m, cart3<view>.normal n) {
	if ((dot(m, n) > 0.)) {  
		float roughness = getRoughness();
    float theta = 0.;
    if (anisotropic == 1) {
      theta = getAngle(m in normal_localframe, n);
    }
    else {
		  theta = getAngle(m, n);
    }
		return (roughness*roughness) / (PI * (cos(theta)*cos(theta)*cos(theta)*cos(theta))
      * (((roughness*roughness) + (tan(theta)*tan(theta)))*((roughness*roughness) + (tan(theta)*tan(theta)))));
	}
	else { 
		return 0.;
	}
}

float G1(cart3<view>.direction v, cart3<view>.halfdir m, cart3<view>.normal n) { 
  if (dot(v, m) * dot(v, n) > 0.) { 
	  float roughness = getRoughness();
	  float theta = getAngle(v, normalize(n));
	  return (2. / (1. + sqrt(1. + (roughness*roughness) * (tan(theta)*tan(theta)))));
  }
  else { return 0.; }
}

float G(cart3<view>.direction i, cart3<view>.direction o, cart3<view>.halfdir m, cart3<view>.normal n) {
  return (G1(i, m, getShadingNormal()) * G1(o, m, getShadingNormal()));
}

vec3 getDiffuseColor() {
  vec3 kd = mat_diffuseColor;
  if (mat_hasDiffuseTexture == 1) { 
    auto tmp = texture2D(mat_diffuseTexture, geom_texCoord);
    kd[0] *= tmp[0];
    kd[1] *= tmp[1];
    kd[2] *= tmp[2];
  }
  return kd;
}

vec3 I(color c, cart3<view>.point source, cart3<view>.point target, attenuation a) { 
  float d = distance(source, target);
  return (c / (a[0] + a[1] * d + a[2] * d * d));
}

vec3 promote(float f) {
  return [f, f, f];
}

void main() {
  	alphaColor final_color = [0., 0., 0., 1.];
	auto i = normalize(light_eyePosition - geom_position);
	auto o = normalize(-geom_position);
	auto m = get_halfdir(i, o);
	auto n = getShadingNormal();
	auto kd = getDiffuseColor();
	final_color += alphatize(
		(kd + promote(F(i,m) * D(m,n) * G(i,o,m,n) / (4.0 * abs (dot(i,n)) * abs(dot(o,n))))) * max(0., dot(n,i)) 
		* I(light_color, light_eyePosition, geom_position, light_attenuation));
	gl_FragColor = final_color;
}