// b->ac, for example, is a matrix map from b to ac (duh?)
// Feel free to make it a function instead, or use * if you're feeling bold

declare type vec2 is float[2];
declare type mat2 is float[2][2];
declare vec2 *(mat2 m, vec2 v);

prototype euclidean {
    object vector;
    with frame() r: object matrix;

    with frame() r: vector *(matrix<r> m, vector v);
}

with frame(2) r:
coordinate cart2 : euclidean {
    object vector is float[2];
    with frame(2) r2: object matrix is float[2][2];

    with frame(2) r2:
    canon this<r2>.vector *(canon matrix<r2> m, vector v) {
        return (m as! mat2 * v as! vec2) as! this<r2>.vector;
    }
}

frame a has dimension 2;
// type ac is a;
frame b has dimension a;
// type bnc is b;
type c is vec2;
type cnc is c;
type cncnc is cnc;

void main() {
    // Test interactions between coord and non-coord things
    // Also test upcasting allowance with 'in' notation

    cart2<a>.vector avec = [1., 1.];
    // cart<bnc>.vector bncvec = [0., 1.];

    canon cart2<a>.matrix<b> __ab = [[1., 1.], [1., 2.]];
    // canon ac->b __acb = [[2., -1.], [-1., 1.]];
    // becomes 
    // canon cart2<ac>.matrix<b> __acb = [[2., -1.], [-1., 1.]];

    cart2<b>.vector s1 = avec in b; // = bvec
    // ac result = bvec in ac;
    // a s2 = bncvec in b;
    // a s3 = bncvec in ac;
    // b s4 = bncvec in ac in b; // Also check that associativity works correctly

    // print s1;
    // print s2;
    // print s3;
    // print s4;

    // cnc cncvec = [1., 2.];
    // cncnc cncncvec = [.3, .6];
    // canon c->b __cb = [[1., 2.], [-2., -1.]];

    // a s5 = cncncvec in b;
    // ac s6 = cncvec in ac;
    // a s7 = cncvec in a; // Note that this must be through the path c->b since that's the shortest path

    // print s5;
    // print s6;
    // print s7;

    // auto __cac = __bac * __cb; // Should add c->ac to psi
    // ac s8 = cncvec in ac;
    // a s9 = cncvec in a; // We can only test not the type since the result is completely arbritrary (c->ac and c->b are equally long paths)

    // print s8;
}
