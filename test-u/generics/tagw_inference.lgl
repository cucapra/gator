// Take a look at infer.lgl first if you wanna start thinking about inference
// Introducing tags makes it even weirder o_O
// (Also check out declare.lgl to make sure that stuff works)

declare type vec2 is float[2];
declare type mat2x2 is float[2][2];
declare vec2 *(mat2x2 m, vec2 v);

type a is vec2;
type b is vec2;
type c is b;
type d is b;
type e is c;

prototype euclidean {
    object vector;
    with frame() r: object matrix;

    with frame() r: vector *(matrix<r> m, vector v);
}

with frame(2) r:
coordinate cart2 : euclidean {
    object vector is float[2];
    with frame(2) r2: object matrix is float[2][2];

    with frame(2) r2:
    canon this<r2>.vector *(canon matrix<r2> m, vector v) {
        return (m as! mat2x2 * v as! vec2) as! this<r2>.vector;
    }
}

// TODO: that this syntax is not yet supported
with T:
T id(T x) {
    return x;
}
 
// Note that we will also use this to check bounds!
with vec2 T:
vec2 to_top(T x) {
    mat2x2 m = [[1., 0.], [0., 1.]];
    return m * x;
}

// Note that, as before, bounds just increase the strictness of the operation
with c T:
b as_b(c x) {
    return x;
}

// Note also that bounds using tags can make using a function impossible
with a T:
vec2 uninvokable(T x) {
    return x;
}

with b T:
T low_cast(a x) {
    canon cart2<a>.matrix<b> a_b = [[.5, .5], [1.5, .5]];
    canon cart2<T>.matrix<T> id = [[1., 0.], [0., 1.]];
    return id * a_b * x;
}

with c T:
T very_low_cast(a x) {
    return low_cast(x);
}

void main() {
    a avec = [1., 1.];
    b bvec = [1., 2.];
    c cvec = [0., 2.];
    d dvec = [1., 0.];
    e evec = [0., 1.];

    a s1 = id(avec); // Easy enough so far
    b s2 = id(cvec); // Subsumption still works
    vec2 s3 = to_top(avec);
    vec2 s4 = to_top(evec); // Pretty cool tbh
    vec2 s5 = to_top(avec) + to_top(bvec);
    vec2 s6 = to_top(id(evec)); // Multi-level inference

    b s7 = as_b(cvec);
    b s8 = as_b(evec) + as_b(dvec);

    d s9 = low_cast(avec); // A bit trickier
    c s10 = low_cast(avec);
    b s11 = as_b(id(low_cast(avec))); // ouch -- see what has to be inferred below:
    // b s11 = as_b<c>(id<c>(low_cast<c>(avec))); -- not trivial
    b s12 = very_low_cast(avec); // should cast down to c, then back up to b
    e s13 = very_low_cast(avec); // should still work

    print 1;
}
