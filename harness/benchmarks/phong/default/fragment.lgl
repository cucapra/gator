using "../../glsl_defs.lgl";

type color is vec3;
type alphaColor is vec4;

// Reference Frame Declarations

frame model has dimension 3;
frame world has dimension 3;
frame camera has dimension 3;
frame light has dimension 3;

// Global Variables

varying cart3<model>.point vPosition;
uniform hom<model>.transformation<world> uModel;
uniform hom<world>.transformation<camera> uView;
varying cart3<model>.vector vNormal;
uniform cart3<world>.point uLight;

// Can't canonicalize matrices for now, so we do this
canon hom<world>.point app_uModel(hom<model>.point v) {
    return uModel * v;
}
canon hom<world>.vector app_uModel(hom<model>.vector v) {
    return uModel * v;
}
canon hom<camera>.point app_uView(hom<world>.point v) {
    return uView * v;
}
canon hom<camera>.vector app_uView(hom<world>.vector v) {
    return uView * v;
}

// Shader Code

void main() {
    color ambient = [.1, 0., 0.];
    color diffColor = [0.4, 0.3, 0.9];
    color specColor = [1.0, 1.0, 1.0];

    // auto temp = vPosition in hom.point<model>;
    auto worldPos = vPosition in world;
    auto camPos = worldPos in camera;
    auto worldNorm = normalize(vNormal in world);

    auto lightDir = normalize(uLight - worldPos);
    auto lightWorldDot = dot(lightDir, worldNorm);
    scalar diffuse = max(lightWorldDot, 0.0);

    auto reflectDir = normalize(reflect(-lightDir, worldNorm) in camera);

    scalar specular = pow(max(dot(normalize(-camPos), reflectDir), 0.), 32.);

    vec4 gl_FragColor = vec4(ambient + diffuse * diffColor + specular * specColor, 1.0);
}