return vec4(c, 1.) as! alphaColor;
alphaColor bitShift = [1.0 / (16777216.), 1.0 / (65536.), 1.0 / (256.0), 1.];
return dot(c, bitShift);
float lambertian = max(0., dot(normalDir, normalize(-(-lightPos))));
cart3<world>.direction reflectDir = normalize(reflect(normalize(-lightPos), normalDir));
float specular = 0.;
if (0. <= lambertian) {
    specular = pow(max(0., dot(normalize(-fragPos), reflectDir)), 32.);
}
float distance = length(lightPos - fragPos);
auto temp = (linear * distance + quad * distance * distance);
float attenuation = 1.0 / temp;
auto tempColor = (lambertian * baseColor + specStrength * specular * [1., 1., 1.]);
return tempColor * attenuation;
color ambient = [.1, 0., 0.];
float texelSize = 1. / 1024.;
vec2 temp = [vShadowPos[0], vShadowPos[1]];
alphaColor v = texture2D(uTexture, temp);
float amountInLight = 0.;
for (float x = -1.; x <= 1.; x += 1.) {
for (float y = -1.; y <= 1.; y += 1.) {
    float texelDepth = decodeFloat(texture2D(uTexture, temp + [x, y] * texelSize));
    // float texelDepth = texture2D(uTexture, vShadowPos.xy + [x, y] * texelSize).z;
    if (vShadowPos[2] - 0.007 <= texelDepth) {
    amountInLight += 1.0;
    }
}
}
amountInLight /= 9.;
color phong_color = phong_light(uLight, vPosition in world, normalize(vNormal in world), 
uBaseColor, uSpecStrength, .08, .0001);
auto gl_FragColor = extendColor(ambient + phong_color * amountInLight);
vec4 bitShift = [
256. * 256. * 256.,
256. * 256.,
256.,
1.0
];
vec4 bitMask = [
0.,
1.0 / 256.0,
1.0 / 256.0,
1.0 / 256.0
];
vec4 comp = fract(depth * bitShift);
vec4 temp = [comp[0], comp[0], comp[1], comp[2]];
comp -= temp * bitMask;
return comp;
vec4 gl_FragColor = encodeFloat(gl_FragCoord[2]);
auto gl_Position = aPosition in hom<lightProjective>;
hom<lightProjective>.transformation<lightProjective> texUnitConverter = 
                                                        [[0.5, 0.0, 0.0, 0.5], 
                                                        [0.0, 0.5, 0.0, 0.5], 
                                                        [0.0, 0.0, 0.5, 0.5], 
                                                        [0.0, 0.0, 0.0, 1.0]];
vShadowPos = hom_reduce(texUnitConverter * (aPosition in hom<lightProjective>));
vPosition = aPosition;
vNormal = aNormal;
auto gl_Position = aPosition in hom<projective>;