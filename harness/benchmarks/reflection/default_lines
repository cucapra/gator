auto N = normalize(uNormalMatrix * vNormal);
auto V = -(vPosition in view);
auto R = -reflect(V,N);
auto gl_FragColor = textureCube(uSkybox, R in model);
color ambient = [.1, 0., 0.];
color diffuse = [0.4, 0.3, 0.9];
color spec = [1.0, 1.0, 1.0];
auto lightDir = normalize((uLight in cart3<world>) - (vPosition in world));
float lambertian = max(dot(normalize(vNormal in world), lightDir), 0.);
auto reflectDir = normalize(reflect(-lightDir, normalize(vNormal in world)) in view);
float specular = pow(max(dot((normalize(-vPosition in view)), reflectDir), 0.0), 32.);
auto gl_FragColor = extendColor(ambient + lambertian * diffuse + specular * spec);
auto gl_FragColor = textureCube(uSkybox, vPosition);
vNormal = aNormal;
vPosition = aPosition;
auto gl_Position = aPosition in hom<projective>;
vNormal = aNormal;
vPosition = aPosition;
auto gl_Position = aPosition in hom<projective>;
vPosition = aPosition;
auto gl_Position = aPosition in hom<projective>;
