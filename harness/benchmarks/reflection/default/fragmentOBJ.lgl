using "../../glsl_defs.lgl";

frame model has dimension 3;
frame world has dimension 3;
frame view has dimension 3;

type color is vec3;
type alphaColor is vec4;

// External Vector Declarations
varying cart3<model>.point vPosition;
uniform hom<model>.transformation<world> uModel;
uniform hom<world>.transformation<view> uView;
varying cart3<model>.vector vNormal;
uniform hom<world>.point uLight;

canon hom<world>.point app_uModel(hom<model>.point v) {
    return uModel * v;
}
canon hom<world>.vector app_uModel(hom<model>.vector v) {
    return uModel * v;
}
canon hom<view>.point app_uView(hom<world>.point v) {
    return uView * v;
}
canon hom<view>.vector app_uView(hom<world>.vector v) {
    return uView * v;
}

alphaColor extendColor(color v) { return vec4(v, 1.) as! alphaColor; }

void main() {
    color ambient = [.1, 0., 0.];
    color diffuse = [0.4, 0.3, 0.9];
    color spec = [1.0, 1.0, 1.0];

    auto lightDir = normalize((uLight in cart3<world>) - (vPosition in world));
    float lambertian = max(dot(normalize(vNormal in world), lightDir), 0.);

    auto reflectDir = normalize(reflect(-lightDir, normalize(vNormal in world)) in view);
    float specular = pow(max(dot((normalize(-vPosition in view)), reflectDir), 0.0), 32.);

    auto gl_FragColor = extendColor(ambient + lambertian * diffuse + specular * spec);
}
