using "../../glsl_defs.lgl";

frame model has dimension 3;
frame world has dimension 3;
frame view has dimension 3;

type color is vec3;
type alphaColor is vec4;

varying cart3<model>.point vPosition;
varying cart3<model>.direction vNormal;
uniform samplerCube<alphaColor> uSkybox;
uniform hom<world>.transformation<view> uView;
uniform hom<model>.transformation<world> uModel;
uniform cart3<model>.transformation<view> uNormalMatrix;
uniform cart3<view>.transformation<model> uInverseViewTransform;


canon hom<world>.point app_uModel(hom<model>.point v) {
    return uModel * v;
}
canon hom<world>.vector app_uModel(hom<model>.vector v) {
    return uModel * v;
}
canon hom<view>.point app_uView(hom<world>.point v) {
    return uView * v;
}
canon hom<view>.vector app_uView(hom<world>.vector v) {
    return uView * v;
}
canon cart3<model>.point app_uView(cart3<view>.point v) {
    return uInverseViewTransform * v;
}
canon cart3<model>.vector app_uView(cart3<view>.vector v) {
    return uInverseViewTransform * v;
}

void main() {
    auto N = normalize(uNormalMatrix * vNormal);
    auto V = -(vPosition in view);
    auto R = -reflect(V,N);
    auto gl_FragColor = textureCube(uSkybox, R in model);
}
